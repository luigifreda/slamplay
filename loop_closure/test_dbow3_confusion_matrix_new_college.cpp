// *************************************************************************
/* 
 * This file is part of the slamplay project.
 * Copyright (C) 2018-present Luigi Freda <luigifreda at gmail dot com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * any later version, at your option. If this file is a modified/adapted 
 * version of an original file distributed under a different license that 
 * is not compatible with the GNU General Public License, the 
 * BSD 3-Clause License will apply instead.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 *
 */
// *************************************************************************
#include <iostream>
#include <opencv2/core/core.hpp>
#include <opencv2/features2d/features2d.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <string>
#include <vector>
#include "DBoW3/DBoW3.h"

#include "datasets/NewCollege.h"
#include "features/FeatureManager.h"
#include "io/file_utils.h"
#include "macros.h"

using namespace cv;
using namespace std;
using namespace slamplay;

std::string dataDir = STR(DATA_DIR);  // DATA_DIR set by compilers flag

/***************************************************
 *  This section demonstrates how to calculate the similarity score based on the previously trained dictionary
 *************************************************/
int main(int argc, char **argv) {
    string dataset_dir = dataDir + "/new_college";
    if (argc == 2) {
        dataset_dir = argv[1];
    } else {
        cout << "usage: " << argv[0] << " <new college dataset dir>" << endl;
    }

    // read the images and database
    cout << "loading vocabulary" << endl;

    DBoW3::Vocabulary vocab(dataDir + "/loop_closure/orbvoc.dbow3");  // use ORBSLAM2 vocabulary

    if (vocab.empty())
    {
        cerr << "vocabulary does not exist." << endl;
        return 1;
    }

    cout << "reading images... " << endl;
    std::vector<std::string> filenames = readNewCollegeFilenames(dataset_dir);
    vector<Mat> images;
    for (const string &file : filenames)
    {
        auto img_filename = dataset_dir + "/Images/" + file;
        Mat image = imread(img_filename);
        images.push_back(image);
    }

    // NOTE: in the case we are comparing images with a vocabulary generated by themselves, this may lead to overfit.
    //  extract features
    cout << "extracting features ... " << endl;
    const string feature_type = "orb";
    cout << "type: " << feature_type << endl;
    Ptr<Feature2D> detector = getFeature2D(feature_type);
    vector<Mat> descriptors;
    for (Mat &image : images)
    {
        vector<KeyPoint> keypoints;
        Mat descriptor;
        detector->detectAndCompute(image, Mat(), keypoints, descriptor);
        descriptors.push_back(descriptor);
    }

    // we can compare the images directly or we can compare one image to a database
    // images :
    cout << "extracting BOW image descriptors " << endl;
    std::vector<DBoW3::BowVector> bow_vecs;
    bow_vecs.reserve(images.size());
    for (size_t i = 0; i < images.size(); i++)
    {
        DBoW3::BowVector v1;
        vocab.transform(descriptors[i], v1);
        bow_vecs.push_back(v1);
    }

    cout << "writing confusion matrix " << endl;
    std::string output_path("confusion_matrix.txt");
    std::ofstream of;
    of.open(output_path);
    if (of.fail()) {
        std::cerr << "Failed to open output file " << output_path << std::endl;
        exit(1);
    }
    // Compute confusion matrix
    // i.e. the (i, j) element of the matrix contains the distance
    // between the BoW representation of frames i and j
    for (unsigned int i = 0; i < bow_vecs.size(); i++) {
        for (unsigned int j = 0; j < bow_vecs.size(); j++) {
            of << vocab.score(bow_vecs[i], bow_vecs[j]) << " ";
        }
        of << "\n";
    }

    cout << "done." << endl;
}