#include <iostream>
#include <opencv2/core/core.hpp>
#include <opencv2/features2d/features2d.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <string>
#include <vector>
#include "DBoW3/DBoW3.h"

#include "FeatureManager.h"
#include "file_utils.h"
#include "macros.h"

using namespace cv;
using namespace std;
using namespace slamplay;

std::string dataDir = STR(DATA_DIR);  // DATA_DIR set by compilers flag

/***************************************************
 *   This section demonstrates how to calculate the similarity score based on the previously trained dictionary
 *************************************************/
int main(int argc, char **argv) {
    string dataset_dir = dataDir + "/loop_closure/";
    if (argc == 2) {
        dataset_dir = argv[1];
    } else {
        cout << "usage: " << argv[0] << " <dataset dir>" << endl;
    }

    // read the images and database
    cout << "loading vocabulary" << endl;

    // DBoW3::Vocabulary vocab(dataDir + "/loop_closure/vocabulary.yml.gz");
    // DBoW3::Vocabulary vocab(dataDir + "/loop_closure/vocab_larger.yml.gz");  //use larger vocab if you want
    DBoW3::Vocabulary vocab(dataDir + "/loop_closure/orbvoc.dbow3");  // use ORBSLAM2 vocabulary

    if (vocab.empty())
    {
        cerr << "vocabulary does not exist." << endl;
        return 1;
    }

    cout << "reading images... " << endl;
    std::vector<std::string> filenames;
    getImageFilenames(dataset_dir, filenames);
    vector<Mat> images;
    for (const string &file : filenames)
    {
        Mat image = imread(file);
        images.push_back(image);
    }

    // NOTE: in the case we are comparing images with a vocabulary generated by themselves, this may lead to overfit.
    //  extract features
    cout << "extracting features ... " << endl;
    const string feature_type = "orb";
    cout << "type: " << feature_type << endl;
    Ptr<Feature2D> detector = getFeature2D(feature_type);
    vector<Mat> descriptors;
    for (Mat &image : images)
    {
        vector<KeyPoint> keypoints;
        Mat descriptor;
        detector->detectAndCompute(image, Mat(), keypoints, descriptor);
        descriptors.push_back(descriptor);
    }

    // we can compare the images directly or we can compare one image to a database
    // images :
    cout << "comparing images with images " << endl;
    std::vector<DBoW3::BowVector> bow_vecs;
    bow_vecs.reserve(images.size());
    for (size_t i = 0; i < images.size(); i++)
    {
        DBoW3::BowVector v1;
        vocab.transform(descriptors[i], v1);
        bow_vecs.push_back(v1);

        for (size_t j = i; j < images.size(); j++) {
            DBoW3::BowVector v2;
            vocab.transform(descriptors[j], v2);
            double score = vocab.score(v1, v2);
            cout << "image " << i << " vs image " << j << " : " << score << endl;
        }
        cout << endl;
    }

    // or with database
    cout << "comparing images with database " << endl;
    DBoW3::Database db(vocab, false /*use_di*/, 0);  // false = do not use direct index (so ignore the last param)
    // The direct index is useful if we want to retrieve the features that
    // belong to some vocabulary node.
    // db creates a copy of the vocabulary, we may get rid of "vocab" now
    for (size_t i = 0; i < descriptors.size(); i++)
        db.add(descriptors[i]);
    cout << "database info: " << db << endl;
    for (size_t i = 0; i < descriptors.size(); i++) {
        DBoW3::QueryResults ret;
        db.query(descriptors[i], ret, 4);
        cout << "searching for image " << i << " returns " << ret << endl
             << endl;
    }

    cout << "writing confusion matrix " << endl;
    std::string output_path("confusion_matrix.txt");
    std::ofstream of;
    of.open(output_path);
    if (of.fail()) {
        std::cerr << "Failed to open output file " << output_path << std::endl;
        exit(1);
    }
    // Compute confusion matrix
    // i.e. the (i, j) element of the matrix contains the distance
    // between the BoW representation of frames i and j
    for (unsigned int i = 0; i < bow_vecs.size(); i++) {
        for (unsigned int j = 0; j < bow_vecs.size(); j++) {
            of << vocab.score(bow_vecs[i], bow_vecs[j]) << " ";
        }
        of << "\n";
    }

    cout << "done." << endl;
}