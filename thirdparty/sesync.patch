diff --git a/C++/CMakeLists.txt b/C++/CMakeLists.txt
index 03cdb99..75f7a64 100644
--- a/C++/CMakeLists.txt
+++ b/C++/CMakeLists.txt
@@ -30,9 +30,12 @@ set(ENABLE_OPENMP ON CACHE BOOL "Enable OpenMP (if available)")
 # Enable code profiling using gperftools
 set(ENABLE_PROFILING OFF CACHE BOOL "Enable code profiling using gperftools")
 # Enable visualization module.
-set(ENABLE_VISUALIZATION OFF CACHE BOOL "Enable visualization module.")
+set(ENABLE_VISUALIZATION ON CACHE BOOL "Enable visualization module.")
 # Build Python bindings
 set(BUILD_PYTHON_BINDINGS OFF CACHE BOOL "Build Python bindings.")
+# Import Pangolin from 
+set(PANGOLIN_ROOT ${PROJECT_SOURCE_DIR}/../../pangolin CACHE STRING "Specify Pangolin folder") 
+
 
 # Add the .cmake files that ship with Eigen3 to the CMake module path (useful for finding other stuff)
 set(CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/cmake" CACHE STRING "The CMake module path used for this project")
@@ -55,7 +58,10 @@ set(CMAKE_EXE_LINKER_FLAGS ${CMAKE_EXE_LINKER_FLAGS} -lprofiler)
 endif()
 
 if(${ENABLE_VISUALIZATION})
+  set(CMAKE_PREFIX_PATH ${PANGOLIN_ROOT}/install/lib/cmake/Pangolin/) 
   find_package(Pangolin REQUIRED)
+  message(STATUS "pangolin include: ${Pangolin_INCLUDE_DIRS}")
+  message(STATUS "pangolin libs: ${Pangolin_LIBRARIES}")
 endif()
 
 if(${BUILD_PYTHON_BINDINGS})
@@ -139,6 +145,7 @@ endif()
 
 # If visualization is enabled, build library.
 if(${ENABLE_VISUALIZATION})
+  include_directories(${Pangolin_INCLUDE_DIRS})
   set(SESyncViz_HDRS ${SESync_HDR_DIR}/SESyncVisualizer.h)
   set(SESyncViz_SRCS ${SESync_SOURCE_DIR}/SESyncVisualizer.cpp)
 
diff --git a/C++/Preconditioners b/C++/Preconditioners
--- a/C++/Preconditioners
+++ b/C++/Preconditioners
@@ -1 +1 @@
-Subproject commit 68a9d24fee8a24bf10920171033ceb7d09517f52
+Subproject commit 68a9d24fee8a24bf10920171033ceb7d09517f52-dirty
diff --git a/C++/SE-Sync/include/SESync/SESyncVisualizer.h b/C++/SE-Sync/include/SESync/SESyncVisualizer.h
index e60847f..78a9233 100644
--- a/C++/SE-Sync/include/SESync/SESyncVisualizer.h
+++ b/C++/SE-Sync/include/SESync/SESyncVisualizer.h
@@ -10,6 +10,8 @@
 #include <pangolin/pangolin.h>
 #include <pangolin/scene/axis.h>
 #include <pangolin/scene/scenehandler.h>
+#include <pangolin/gl/glfont.h>
+#include <pangolin/display/default_font.h>
 
 #include <Eigen/Dense>
 #include <tuple>
diff --git a/C++/SE-Sync/src/SESyncVisualizer.cpp b/C++/SE-Sync/src/SESyncVisualizer.cpp
index 66c634b..669520c 100644
--- a/C++/SE-Sync/src/SESyncVisualizer.cpp
+++ b/C++/SE-Sync/src/SESyncVisualizer.cpp
@@ -7,7 +7,7 @@
 
 #include "SESync/SESyncVisualizer.h"
 
-#include <Eigen/StdVector>
+#include <Eigen/StdVector> 
 #include <cstdlib>
 
 namespace SESync {
@@ -239,10 +239,10 @@ void SESyncVisualizer::DrawInfoText(const size_t iter, const bool bkgnd) const {
     glColor3f(0.0f, 0.0f, 0.0f);  // Black text on white background.
   }
 
-  pangolin::GlFont::I()
+  pangolin::default_font()
       .Text("Iterate: %d/%d", iter + 1, num_iters_)
       .DrawWindow(10, 22);
-  pangolin::GlFont::I()
+  pangolin::default_font()
       .Text("Staircase level: %d", staircase_.at(iter))
       .DrawWindow(10, 10);
 
diff --git a/C++/changes/LSChol.cpp b/C++/changes/LSChol.cpp
new file mode 100644
index 0000000..a2bb7eb
--- /dev/null
+++ b/C++/changes/LSChol.cpp
@@ -0,0 +1,101 @@
+#include "LSChol/LSChol.h"
+
+namespace Preconditioners {
+
+void LSChol::init() {
+
+  /// Set default SPQR options
+
+  ordering_ = SPQR_ORDERING_DEFAULT;
+  num_fact_tol_ = SPQR_DEFAULT_TOL;
+  pivot_tol_ = std::numeric_limits<Scalar>::epsilon();
+  useDefaultThreshold_ = true;
+
+  // Initialize Cholmod environment
+  cholmod_l_start(&chol_com_);
+}
+
+/// Constructors
+
+LSChol::LSChol() { init(); }
+
+LSChol::LSChol(const SparseMatrix &A) {
+  init();
+  compute(A);
+}
+
+void LSChol::compute(const SparseMatrix &A) {
+
+  LSCholSparseMatrix LSA(A);
+
+  /// Get a view of mat as a cholmod_sparse matrix.  NB: this does *NOT*
+  /// allocate new memory, rather it just wrap's A's
+  cholmod_sparse Achol = Eigen::viewAsCholmod(LSA);
+
+  /// Set threshold for numerical pivoting
+
+  /* Compute the default threshold as in MatLab, see:
+   * Tim Davis, "Algorithm 915, SuiteSparseQR: Multifrontal
+   * Multithreaded Rank-Revealing Sparse QR Factorization, ACM Trans. on
+   * Math. Soft. 38(1), 2011, Page 8:3
+   */
+  RealScalar pivotThreshold = pivot_tol_;
+  if (useDefaultThreshold_) {
+    RealScalar max2Norm = 0.0;
+    for (int j = 0; j < LSA.cols(); j++)
+      max2Norm = std::max(max2Norm, LSA.col(j).norm());
+    if (max2Norm == RealScalar(0))
+      max2Norm = RealScalar(1);
+    pivotThreshold = 20 * (LSA.rows() + LSA.cols()) * max2Norm *
+                     std::numeric_limits<RealScalar>::epsilon();
+  }
+
+  // Cholmod output
+  cholmod_sparse *cR; // The sparse triangular factor R in cholmod's format
+  StorageIndex *E;    // The permutation applied to columns
+
+#if (__GNUC__ >= 13 && __GNUC_MINOR__ >= 2) 
+  // Compute factorization!
+  rank_ = SuiteSparseQR<Scalar, int64_t>(ordering_, pivotThreshold, Achol.ncol, &Achol,
+                                &cR, &E, &chol_com_);
+#else
+  // Compute factorization!
+  rank_ = SuiteSparseQR<Scalar>(ordering_, pivotThreshold, Achol.ncol, &Achol,
+                                &cR, &E, &chol_com_);
+#endif 
+
+  // Store upper-triangular factor R as a standard Eigen matrix
+  R_ = Eigen::viewAsEigen<Scalar, Eigen::ColMajor, Index>(*cR);
+
+  // Store permutation vector in P
+  P_.resize(R_.cols());
+  for (size_t k = 0; k < R_.cols(); ++k)
+    P_.indices()(k) = E[k];
+
+  // Release cR and E
+  cholmod_l_free_sparse(&cR, &chol_com_);
+
+  if (E != NULL)
+    std::free(E);
+
+  initialized_ = true;
+}
+
+Vector LSChol::PRinv(const Vector &x) const {
+  return P_ * R_.triangularView<Eigen::Upper>().solve(x);
+}
+
+Vector LSChol::RinvTPinv(const Vector &x) const {
+  return R_.transpose().triangularView<Eigen::Lower>().solve(P_.transpose() *
+                                                             x);
+}
+
+Vector LSChol::RPinv(const Vector &x) const {
+  return R_ * (P_.transpose() * x);
+}
+
+Vector LSChol::solve(const Vector &x) const { return PRinv(RinvTPinv(x)); }
+
+LSChol::~LSChol() { cholmod_l_finish(&chol_com_); }
+
+} // namespace Preconditioners
