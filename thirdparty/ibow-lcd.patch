diff --git a/CMakeLists.txt b/CMakeLists.txt
index e76804e..ffdf971 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -1,6 +1,8 @@
 cmake_minimum_required(VERSION 3.1 FATAL_ERROR)
 project(ibow-lcd LANGUAGES CXX)
 
+set(OPENCV_VERSION          "4" CACHE STRING "Desired OpenCV version") # this is the first target version that is searched for 
+
 # Setting build type to Release
 if(NOT CMAKE_BUILD_TYPE)
   set(CMAKE_BUILD_TYPE Release)
@@ -18,29 +20,28 @@ elseif(CMAKE_BUILD_TYPE MATCHES Debug)
   set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -O1 -pg -march=native")
 endif()
 
-# Check C++11 or C++0x support
-include(CheckCXXCompilerFlag)
-CHECK_CXX_COMPILER_FLAG("-std=c++11" COMPILER_SUPPORTS_CXX11)
-CHECK_CXX_COMPILER_FLAG("-std=c++0x" COMPILER_SUPPORTS_CXX0X)
-if(COMPILER_SUPPORTS_CXX11)
-   set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
-   message(STATUS "Using flag -std=c++11.")
-elseif(COMPILER_SUPPORTS_CXX0X)
-   set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++0x")
-   message(STATUS "Using flag -std=c++0x.")
-else()
-   message(FATAL_ERROR "The compiler ${CMAKE_CXX_COMPILER} has no C++11 support.
-                         Please use a different C++ compiler.")
-endif()
+
+set(CMAKE_CXX_STANDARD 20)
+set(CMAKE_CXX_STANDARD_REQUIRED ON) # CMake will generate an error if it is unable to compile the code with a compiler that supports C++17.
 
 # Printing the compiling flags
 message(STATUS "Compiler flags: ${CMAKE_CXX_FLAGS}")
 
 # Catkin dependencies
-find_package(catkin REQUIRED COMPONENTS roscpp obindex2)
+#find_package(catkin REQUIRED COMPONENTS roscpp obindex2)
 
 # Other packages
-find_package(OpenCV REQUIRED) # OpenCV
+
+message(STATUS "Desired OpenCV version: ${OPENCV_VERSION}")
+find_package(OpenCV ${OPENCV_VERSION} REQUIRED)
+include(CheckIncludeFileCXX) 
+set (CMAKE_REQUIRED_INCLUDES ${OpenCV_INCLUDE_DIRS})
+check_include_file_cxx(opencv2/xfeatures2d.hpp HAVE_OPENCV_CONTRIB)
+if(HAVE_OPENCV_CONTRIB)
+  message(STATUS "opencv_contrib found!")
+  add_definitions(-DHAVE_OPENCV_CONTRIB)
+endif()
+
 find_package(Boost REQUIRED COMPONENTS system filesystem)
 find_package(OpenMP REQUIRED) # OpenMP
 if (OPENMP_FOUND)
@@ -49,16 +50,21 @@ if (OPENMP_FOUND)
 endif()
 
 # Defining the package
-catkin_package(
-    INCLUDE_DIRS include external
-    LIBRARIES lcdetector
-    CATKIN_DEPENDS roscpp obindex2
-    DEPENDS OpenCV Boost
-)
+# catkin_package(
+#     INCLUDE_DIRS include external
+#     LIBRARIES lcdetector
+#     CATKIN_DEPENDS roscpp obindex2
+#     DEPENDS OpenCV Boost
+# )
+
+set(catkin_INCLUDE_DIRS ${PROJECT_SOURCE_DIR}/../obindex2/lib/include)
+set(catkin_LIBRARIES obindex2)
+link_directories(${PROJECT_SOURCE_DIR}/../obindex2/lib/build)
 
 include_directories(include
                     external
-                    ${catkin_INCLUDE_DIRS}
+                    external/nlohmann
+                    ${catkin_INCLUDE_DIRS} 
                     ${OpenCV_INCLUDE_DIRS}
                     ${Boost_INCLUDE_DIRS})
 
diff --git a/external/json.hpp b/external/json_old.hpp
similarity index 100%
rename from external/json.hpp
rename to external/json_old.hpp
